swagger: "2.0"
info:
  version: 1.0.0
  title: "Social Human Computation"
  description: Social Human Computation API
  termsOfService: http://swagger.io/terms/
  contact:
    name: Hcomp Team
    email: francesco.spagnolo@studenti.unitn.it
    url: https://hsoc.herokuapp.com/
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: hsoc.herokuapp.com
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /task:
    post:
      tags:
      - "task"
      summary: "Add Task"
      description: Creates a new Task
      operationId: createTask
      parameters:
        - name: task
          in: body
          description: Task
          required: true
          schema:
            $ref: '#/definitions/NewTask'
      responses:
        200:
          description: task succesfully created
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /task/{taskID}:
    get:
      tags:
      - "task"
      summary: "Get task by ID"
      description: "Returns a single task"
      operationId: "getTaskByID"
      produces:
      - "application/json"
      parameters:
      - name: "taskID"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    put:
      tags:
      - "task"
      summary: "Update task by ID"
      description: "Updates a Task status"
      operationId: updateTask
      produces:
      - "application/json"
      parameters:
      - name: "taskID"
        in: "path"
        description: "ID of task to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"

    delete:
      tags:
      - "task"
      summary: "Delete task by ID"
      description: "Deletes a task by ID"
      parameters:
      - name: "taskID"
        in: "path"
        description: "ID of task to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Task succesfully deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
  /task/complete:
    post:
      tags:
      - "task"
      summary: "Task answers submit"
      description: Submits task answers
      operationId: taskCompleted
      parameters:
        - name: task
          in: body
          description: Task ID with mapping associated
          required: true
          schema:
            $ref: '#/definitions/TaskAnswers'
      responses:
        200:
          description: task succesfully created
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /auth/login/facebook:
    get:
      tags:
      - "oAuth"
      summary: "Facebook login"
      description: "Redirects to facebook oauth login"
      responses:
        200:
          description: "Logged in"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /auth/login/google:
    get:
      tags:
      - "oAuth"
      summary: "Google login"
      description: "Redirects to google oauth login"
      responses:
        200:
          description: "Logged in"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /auth/logout:
    get:
      tags:
      - "oAuth"
      summary: "Logout"
      description: "Logouts the user (brute?)"
      responses:
        200:
          description: "Logged out"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /stats/{userID}:
    get:
      tags:
      - "Stats"
      summary: "Get User Stats"
      description: Retrieve some statistics of the given User
      operationId: getStatsById
      parameters:
        - name: userID
          in: path
          type: string
          description: User ID
          required: true
      responses:
        200:
          description: stats succesfully returned
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /consumerhistory/{id}:
    get:
      tags:
      - Assignment
      description: Returns all assignment done by a given user id.                    
      produces:
       - application/json
      parameters:
        - name: id
          description: User id 
          in: path         
          required: true
          type: integer                
      responses:
         200:
          description: An array of Assignments and Users
          schema:
             $ref: '#/definitions/assignment'

  /guestmotivational:
    get:
     tags:
     - Assignment
    description: Returns the most assignment done by consumer users.
    produces:
       - application/json
    parameters:
       - name: id
         description: User id 
         in: path         
         required: true
         type: integer            
    responses:
          200:
            description: An array of Assignment and Users
            schema:
              $ref: '#/definitions/assignment'

  /writermotivational:
      get:
        tags:
          - Assignment
        description: Returns the most assignment done by consumer users regarding your tasks.
        produces:
          - application/json
        parameters:
          - name: id
            description: User id 
            in: path         
            required: true
            type: integer            
        responses:
          200:
            description: An array of Assignment and Users
            schema:
              $ref: '#/definitions/assignment' 

  /consumermotivational:
      get:
        tags:
          - Assignment
        description: Returns the most assignment done by your friends.
        produces:
          - application/json
        parameters:
            - name: id
              description: User id 
              in: path         
              required: true
              type: integer            
        responses:
          200:
            description: An array of Assignment and Users
            schema:
              $ref: '#/definitions/assignment'

  /recentTasks/{id}:
     get:
       tags:
         - Tasks
       description: Returns the most recent tasks. 2 by default. Also check if there are any friends 
                    who have made them. If so, users also returned. If id is null just return the most
                    recent tasks
       produces:
         - application/json
       parameters:
           - name: id
             description: User id 
             in: path         
             required: true
             type: integer            
       responses:
         200:
           description: An array of Tasks and An array of Users
           schema:
             $ref: '#/definitions/tasks'

  /tasksbycategory/{id}:
      get:
        tags:
          - Tasks
        description: Returns all tasks by given category id.                     
        produces:
          - application/json                
        responses:
          200:
            description: An array of Tasks
            schema:
              $ref: '#/definitions/tasks'

  /categories:
      get:
        tags:
          - Tasks
        description: Returns all categories.                    
        produces:
          - application/json                
        responses:
          200:
            description: An array of Categories
            schema:
              $ref: '#/definitions/tasks'

  /writerhistory/{id}:
     get:
       tags:
        - Tasks
       description: Returns all tasks made by a given user id.                    
       produces:
         - application/json
       parameters:
           - name: id
             description: User id 
             in: path         
             required: true
             type: integer                
       responses:
         200:
           description: An array of Tasks
           schema:
             $ref: '#/definitions/tasks'

  /writerRecentTasks/{id}:
     get:
       tags:
         - Tasks
       description: Returns the most writer recent tasks. 2 by default.
       produces:
         - application/json
       parameters:
           - name: id
             description: User id 
             in: path         
             required: true
             type: integer            
       responses:
         200:
           description: An array of Tasks
           schema:
             $ref: '#/definitions/tasks'

  /auth/loginAsWriter/facebook:
        get:
          tags:
            - Users
          description: Login with Facebook
          produces:
            - application/json             
          responses:
            200:
              description: return a Token with user informations and Edit user's writer as true
              schema:
                $ref: '#/definitions/users'

  /auth/loginAsWriter/google:
       get:
         tags:
           - Users
         description: Login with Google
         produces:
           - application/json             
         responses:
           200:
             description: return a Token with user informations and Edit user's writer as true
             schema:
               $ref: '#/definitions/users'

  /auth/loginAsConsumer/facebook:
        get:
          tags:
            - Users
          description: Login with Facebook
          produces:
            - application/json             
          responses:
            200:
              description: return a Token with user informations. If user's writer is true change in false
              schema:
                $ref: '#/definitions/users'

  /auth/loginAsConsumer/google:
        get:
          tags:
            - Users
          description: Login with Google
          produces:
            - application/json             
          responses:
            200:
              description: return a Token with user informations. If user's writer is true change in false
              schema:
                $ref: '#/definitions/users'

  /auth/logout/facebook:
       delete:
         tags:
           - Users
         description: Logout from Facebook session
         produces:
           - application/json                
         responses:
           200:
             description: Logout succeded
             schema:
               $ref: '#/definitions/users'
               
  /auth/logout/google:
      delete:
         tags:
           - Users
         description: Logout from Google session
         produces:
           - application/json                
         responses:
           200:
             description: Logout succeded
             schema:
               $ref: '#/definitions/users' 


definitions:
  Task:
    allOf:
      - $ref: '#/definitions/NewTask'
      - required:
        - id
        properties:
          id:
            type: string
  TaskAnswers:
    required:
      - taskID
      - content
    properties:
      taskID:
        type: string
      content:
        $ref: '#/definitions/TaskMap'
  NewTask:
    required:
      - title
      - description
      - type
      - content
    properties:
      title:
        type: string
      description:
        type: string
      type:
        type: integer
      content:
        $ref: '#/definitions/TaskMap'
  TaskMap:
    type: object
    properties:
      imageURI:
        type: string
      question:
        type: string
      answer:
        type: string
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  assignment:
     properties:
       id:
         type: integer
       user_id:
         type: string
       task_id:
         type: integer
       time_started:
         type: date
       time_completed:
           type: date
       is_in_progress:
         type: boolean
         default: false
       additional_data:
         type: json 
  tasks:
       properties:
         name:
           type: string
         id:
           type: integer
         description:
           type: string
         category_id:
           type: integer
         owner:
             type: integer
         is_deleted:
           type: boolean
           default: false
         is_active:
           type: boolean
           default: false 
  users:
     properties:
       id:
         type: string
       Facebook_ID:
         type: string
       Google_ID:
         type: string      
       email:
           type: string
       is_deleted:
         type: boolean
         default: false
       additional_data:
         type: json
       writer:
         type: boolean
         default: false                  

